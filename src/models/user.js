const mongoose = require("mongoose");
const validator = require("validator");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");

const userSchema = new mongoose.Schema(
  {
    firstName: {
      type: String,
      required: true,
      trim: true,
      maxlength: 50,
      minlength: 2,
      match: [/^[a-zA-Z]+$/, "First name should contain only letters"],
    },
    lastName: {
      type: String,
      required: true,
      trim: true, // Remove whitespace
      maxlength: 50,
      minlength: 2,
      match: [/^[a-zA-Z]+$/, "Last name should contain only letters"],
    },
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true, // Remove whitespace
      //match: [/.+\@.+\..+/, "Please fill a valid email address"],
      validate(value) {
        if (!validator.isEmail(value)) {
          throw new Error("Invalid email address");
        }
      },
    },
    password: {
      type: String,
      required: true,
      // You might want to add more validation for password strength
      validate(value) {
        if (!validator.isStrongPassword(value)) {
          throw new Error("Password is not strong enough");
        }
      },
      // validate: {
      //   validator: function (v) {
      //     return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{2,}$/.test(v);
      //   },
      //   message:
      //     "Password muuust be at least 2 characters long and contain at least one uppercase letter, one lowercase letter, and one number.",
      // },
    },
    age: {
      type: Number,
      min: 0,
      max: 120,
      validate: {
        validator: (v) => v === null || Number.isInteger(v),
        message: (props) => `${props.value} is not an integer value`,
      },
    },
    gender: {
      type: String,
      validate(value) {
        const validGenders = ["male", "female", "other"];
        if (!validGenders.includes(value)) {
          throw new Error("Invalid gender");
        }
      },
      //enum: ["male", "female", "other", ""],
      trim: true,
    },
    photoUrl: {
      type: String,
      default:
        "https://www.pngplay.com/wp-content/uploads/12/User-Avatar-Profile-PNG-Background-Clip-Art.png",
      ///match: [/^https?:\/\/.+\.(jpg|jpeg|png|gif)$/, "Please fill a valid URL"],
      validate(value) {
        if (value && !validator.isURL(value)) {
          throw new Error("Invalid URL");
        }
      },
    },
    skills: {
      type: [String],
      default: [],
      validate: {
        validator: function (v) {
          return (
            Array.isArray(v) && v.every((skill) => typeof skill === "string")
          );
        },
        message: "Skills must be an array of strings",
      },
    },
    about: {
      type: String,
      default: "No bio available",
      maxlength: 500,
      trim: true,
    },
  },
  { timestamps: true }
);

userSchema.methods.getJWT = async function () {
  const user = this;
  //Create a JWT token
  //jwt token is a string which is generated by using a secret key and user id
  const your_jwt_secret = "DEVTINDER@2025";
  const token = await jwt.sign({ _id: user._id }, your_jwt_secret, {
    expiresIn: "1h",
  });
  return token;
};

userSchema.methods.validatePassword = async function (passwordInputByUser) {
  const user = this;
  const passwordHash = user.password;
  // Check password
  //bcrypt.compare() method compares the plain text password with the hashed password
  const isPasswordMatch = await bcrypt.compare(
    passwordInputByUser,
    passwordHash
  );
  return isPasswordMatch;
};

const User = mongoose.model("User", userSchema);

module.exports = User;
